#include<iostream>
using namespace std;
/*有个长度为2n的数组{a1,a2,a3,...,an,b1,b2,b3,...,bn}，
希望排序后{a1,b1,a2,b2,....,an,bn}，请考虑有无时间复杂度o(n)，空间复杂度0(1)的解法。*/

/*解法一：
综合到任意情况，任意的第i个元素，我们最终换到了 (2 * i) % (2 * n + 1)的位置。为何呢？因为：

当0 < i < n时， 原式= (2i) % (2 * n + 1) = 2i；

当i > n时，原式(2 * i) % (2 * n + 1)保持不变。此时，时间复杂度是O(n)，空间复杂度也是O(n)*/
void shuffle1(int *a,int n){
	if (n <= 0)exit;
	int *b = new int[2 * n];
	for (int i=1; i <=2*n;i++){
		int j;
		j = (2 * i) % (2 * n + 1);
		b[j-1] = a[i-1];
	}
	for (int i = 0; i < 2 * n; i++){
		a[i] = b[i];
		cout << a[i] << " ";
	}
	for (int i = 0; i < (2 * n-1); i += 2){
		int temp = a[i];
		a[i] = a[i + 1];
		a[i + 1] = temp;
	}
	delete[] b;
}
/*解法二：令空间复杂度减到O(1)。但感觉更复杂，对人来说。
从上文的分析过程中也就得出了我们的完美洗牌算法，其算法流程为：

输入数组　A[1..2 * n]

step 1 找到 2 * m = 3^k - 1 使得 3^k <= 2 * n < 3^(k +1)

step 2 把a[m + 1..n + m]那部分循环移m位

step 3 对每个i = 0,1,2..k - 1，3^i是个圈的头部，做cycle_leader算法，数组长度为m，所以对2 * m + 1取模。

step 4 对数组的后面部分A[2 * m + 1.. 2 * n]继续使用本算法, 这相当于n减小了m。
*/
//数组下标从1开始，from是圈的头部，mod是要取模的数 mod 应该为 2 * n + 1，时间复杂度O(圈长）
void CycleLeader(int *a, int from, int mod)
{
	int t, i;

	for (i = from * 2 % mod; i != from; i = i * 2 % mod)
	{
		t = a[i-1];
		a[i-1] = a[from-1];
		a[from-1] = t;
	}
}
//翻转字符串时间复杂度O(to - from)
void reverse(int *a, int from, int to)
{
	int t;
	for (; from < to; ++from, --to)
	{
		t = a[from];
		a[from] = a[to];
		a[to] = t;
	}
}

//循环右移num位 时间复杂度O(n)
void RightRotate(int *a, int num, int n)
{
	reverse(a, 1-1, n - num-1);
	reverse(a, n - num , n-1);
	reverse(a, 1-1, n-1);
}
// copyright@caopengcs 8 / 24 / 2013
//时间O(n)，空间O(1)
void PerfectShuffle2(int *a, int n)
{
	int n2, m, i, k, t;
	for (; n > 1;)
	{
		// step 1
		n2 = n * 2;
		for (k = 0, m = 1; n2 / m >= 3; ++k, m *= 3)
			;
		m /= 2;
		// 2m = 3^k - 1 , 3^k <= 2n < 3^(k + 1)

		// step 2
		RightRotate(a + m, m, n);

		// step 3
		for (i = 0, t = 1; i < k; ++i, t *= 3)
		{
			CycleLeader(a, t, m * 2 + 1);
		}

		//step 4
		a += m * 2;
		n -= m;

	}
	// n = 1
	t = a[1-1];
	a[1-1] = a[2-1];
	a[2-1] = t;
}
void shuffle(int *a, int n)
{
	int i, t, n2 = n * 2;
	PerfectShuffle2(a, n);
	for (i = 2; i <= n2; i += 2)
	{
		t = a[i - 1-1];
		a[i - 1-1] = a[i-1];
		a[i-1] = t;
	}
}
int main(){
	int *a = new int[2*5];
	for (int i = 0; i < 10; i++)
		cin >> a[i];
	//shuffle1(a, 5);
	PerfectShuffle2(a, 5);
	for (int i = 0; i < 10; i++){
		cout << a[i]<<" ";
	}
	delete[] a;
	return 1;


}

/*扩展问题：
1、既然完美洗牌问题是给定输入：a1,a2,a3,……aN,b1,b2,b3,……bN，要求输出：b1,a1,b2,a2,……bN,aN；
那么有无考虑过它的逆问题：即给定b1,a1,b2,a2,……bN,aN,，要求输出a1,a2,a3,……aN,b1,b2,b3,……bN ？
思路：	利用额外的一个数组：
for(int i=1;i<=2*n;i++){
	location=2*i%(2*n+1);
	b[i-1]=a[location-1];
}
2、完美洗牌问题是两手洗牌，假设有三只手同时洗牌呢？那么问题将变成：输入是a1,a2,……aN, b1,b2,……bN, c1,c2,……cN，
要求输出是c1,b1,a1,c2,b2,a2,……cN,bN,aN，这个时候，怎么处理？
	for(int i=1;i<=3*n;i+=){
		location=3*i%(3*n+1);
		b[location-1]=a[i-1];
	}
	以后不管“几只手”同时洗牌，同时利用此公式：x*i%(x*n+1)!!
*/
