#include<iostream>
using namespace std;
//将二叉查找树变为有序的双向链表
/*
递归解法：
（1）若树为空，对应双向链表的第一个节点NULL，最后一个节点NULL
（2）若树不为空：
	I、如果左子树为空，对应双向有序链表第一个节点就是根节点；
	II、如果左子树不为空，对应双向有序链表的第一个节点就是左子树转换后双向有序链表的第一个节点；同时将根节点与左子树转换后的双向有序链表的最后一个节点链接；
	III、如果右子树为空，对应双向有序链表的最后一个节点就是根节点；
	IV、如果右子树不为空，对应双向有序链表的最后一个节点就是右子树转换后双向有序链表的最后一个节点，同时将根节点和右子树转换后的双向有序链表的第一个节点链接；

*/
typedef struct Node{
	int key;
	Node * left;
	Node * right;
}Node,*PNode;
void Convert(Node *root, Node * pFirstNode, Node * pLastNode){
	Node *pFirstLeft, *pLastLeft, *pFirstRight, *pLastRight;
	if (root == NULL){//树为空的情况下
		pFirstNode = NULL;
		pLastNode = NULL;
		return;
	}
	if (root->left == NULL){//当左子树为空时，为（2）中（I）的情况
		// 如果左子树为空，对应双向有序链表的第一个节点是根节点  
		pFirstNode = root;
	}
	else{//当左子树不空时，为（2）中（II）的情况

		Convert(root->left, pFirstLeft, pLastLeft);
		// 二叉查找树对应双向有序链表的第一个节点就是左子树转换后双向有序链表的第一个节点 
		pFirstNode = pFirstLeft;
		// 将根节点和左子树转换后的双向有序链表的最后一个节点连接 
		root->left = pLastLeft;
		pLastLeft->right = root;
	}
	if (root->right == NULL){
		// 当右子树为空时，为（2）中（III）的情况
		pLastNode = root;
	}
	else{// 当右子树不空时，为（2）中（IV）的情况
		Convert(root->right, pFirstRight, pLastRight);
		// 对应双向有序链表的最后一个节点就是右子树转换后双向有序链表的最后一个节点  
		pLastNode = pLastRight;
		// 将根节点和右子树转换后的双向有序链表的第一个节点连接  
		root->right = pFirstRight;
		pFirstRight->left = root;
	}
	return;
}
