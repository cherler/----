#include<iostream>
#include<queue>
#include<list>
using namespace std;

typedef struct Node{
	int key;
	Node * left;
	Node * right;
}Node, *PNode;
//8判断两棵树是否结构相同
/*
递归解法：
（1）如果两棵二叉树都为空，返回真
（2）如果两棵二叉树一棵为空，另一棵不为空，返回假
（3）如果两棵二叉树都不为空，如果对应的左子树和右子树都同构返回真，其他返回假
*/
bool CompareTree(Node *root1, Node *root2){
	if (root1 == NULL&&root2 == NULL)
		return true;
	else if (root1 == NULL || root2 == NULL)
		return false;
	bool resultLeft = CompareTree(root1->left, root2->left);
	bool resultRight = CompareTree(root1->right, root2->right);
	return (resultLeft&&resultRight);
}

//9判断二叉树是否平衡二叉树
/*
递归解法：
（1）如果二叉树为空，则是平衡二叉树，返回真
（2）如果二叉树的左子树为AVL，右子树也为真AVL，且左右子树高度差不大于1，则返回真；其他为假
*/
bool isAVL(Node *root,int height){
	if (root == NULL){
		height = 0;
		return true;
	}
	int heightLeft;
	bool resultLeft = isAVL(root->left, heightLeft);
	int heightRight;
	bool resultRight = isAVL(root->right, heightRight);
	if (resultLeft&&resultRight && (abs(heightLeft - heightRight) <= 1)){
		height = (heightLeft > heightRight) ? (heightLeft + 1) : (heightRight + 1);
		return true;
	}
	else{
		height = height = (heightLeft > heightRight) ? (heightLeft + 1) : (heightRight + 1);
		return false;
	}
		
}
//10二叉树镜像转换
/*递归算法：
（1）如果二叉树为空，则返回空
（2）如果二叉树不为空，求左子树和右子树的镜像，然后交换左子树和右子树
*/
Node *Mirror(Node *root){
	if (root == NULL)
		return NULL;
	Node *pLeft = Mirror(root->left);
	Node *pRight = Mirror(root->right);
	root->left = pLeft;
	root->right = pRight;
	return root;
}
/*循环算法：
利用队列访问二叉树；交换左右子树；
*/
void loopMirror(Node *root){
	if (root == NULL)
		exit(1);
	queue<Node*>q;
	q.push(root);
	while (!q.empty()){
		Node *p = q.front();
		q.pop();
		if (p->left)q.push(p->left);
		if (p->right)q.push(p->right);
		Node *temp = p->left;
		p->left = p->right;
		p->right = temp;
	}
}
//11、求二叉树中两个节点的最低公共祖先节点
/*递归算法：
（1）如果两个节点分别在根节点的左子树和右子树，则返回根节点
（2）如果两个节点都在左子树，则递归处理左子树；如果两个节点都在右子树，则递归处理右子树
*/
bool find_node(Node *root, Node *pnode){
	if (root == NULL || pnode == NULL)
		return false;
	if (root == pnode)
		return true;
	bool found = find_node(root->left, pnode);
	if (!found)
		found = find_node(root->right, pnode);
	return found;
}
Node *get_late_common_parent(Node *root, Node *pnode1, Node *pnode2){
	if (root == NULL || pnode1 == NULL || pnode2 == NULL)return NULL;
	if (root == pnode1 && root == pnode2)return root;
	
	if (find_node(root->left, pnode1)){
		if (find_node(root->right, pnode2))
			return root;
		else
		return	get_late_common_parent(root->left, pnode1, pnode2);
	}
	else{
		if (find_node(root->right, pnode2))
			return get_late_common_parent(root->right, pnode1, pnode2);
		else
			return root;
	}
}
/*非递归算法：
保存根节点到两个节点的路径；然后进行比较两个路径；
最后一个相同的节点也就是他们在二叉树中的最近公共祖先节点
*/
bool get_node_path(Node *root, Node *pnode, list<Node*> path){
	if (root == NULL || pnode == NULL)
		return false;
	if (root == pnode){
		path.push_back(root);
		return true;
	}
	path.push_back(root);
	bool found = get_node_path(root->left, pnode, path);
	if (!found)
		found = get_node_path(root->right, pnode, path);
	if (!found)path.pop_back();
	return found;

}
Node *get_last_common_loop(Node *root, Node *pnode1, Node *pnode2){
	if (root == NULL || pnode1 == NULL || pnode2 == NULL)
		return NULL;
	list<Node*> path1;
	bool bResult1 = get_node_path(root, pnode1, path1);
	list<Node*>path2;
	bool bResult2 = get_node_path(root, pnode2, path2);
	if (!bResult1 || !bResult2)
		return NULL;
	Node *pLast = NULL;
	auto iter1 = path1.cbegin();
	auto iter2 = path2.cbegin();
	while (iter1 != path1.cend() && iter2 != path2.cbegin()){
		if (*iter1 == *iter2)
			pLast = *iter1;
		else
			break;
		iter1++;
		iter2++;
	}
	return pLast;
}

//12、求二叉树中节点的最大距离
/*二叉树中相距最远的两个节点的距离
递归算法：
（1）如果二叉树为空，则返回0；
（2）如果二叉树不为空，最大距离要么是左子树中的最大距离，要么是右子树中的最大距离；
要么是左子树到根节点的最大距离+右子树到根节点的最大距离；
因此，我们需要保存子树到根节点的最大距离。
*/
int get_max_node_distance(Node *root,int maxLeft,int maxRight){
	if (root == NULL)
		return 0;
	int maxLL, maxLR, maxRL, maxRR;
	int maxLDistance, maxRDistance;
	if (root->left){
		maxLDistance = get_max_node_distance(root->left, maxLL, maxLR);
		maxLeft = max(maxLL, maxLR) + 1;
	}
	else{
		maxLDistance = 0;
		maxLeft = 0;
	}
	if (root->right){
		maxRDistance = get_max_node_distance(root->right, maxRL, maxRR);
		maxRight = max(maxRL, maxRR) + 1;
	}
	else{
		maxRDistance = 0;
		maxRight = 0;
	}
	return max(maxLDistance, maxRDistance, maxLeft + maxRight );
}
//14、由前序遍历和中序遍历序列重建二叉树
/*二叉树前序遍历中，第一个元素总是树的根节点的值。
中序遍历中，左子树的节点的值位于根节点值得左侧，右子树的值在根节点的右侧。
*/
/*递归解法：
（1）如果前序遍历为空或中序遍历为空或节点个数小于等于0，返回NULL
（2）创建根节点。前序遍历的第一个数据就是根节点的数据。然后在中序遍历中找到根节点的位置，
可分别得到左子树和右子树的前向和中序遍历序列。重建左右子树。
*/
Node * rebuilde_binarytree(int *preOrder, int *inOrder, int nodenum){
	if (!preOrder || !inOrder || nodenum <= 0)
		return NULL;
	Node *root = new Node;
	//前序遍历的第一个数据就是根节点的数据
	root->key = preOrder[0];
	root->left = NULL;
	root->right = NULL;
	//寻找根节点在中序遍历中的位置，中序遍历中，根节点左为左子树，右为右子树
	int rootPositionInorder = -1;
	for (int i = 0; i < nodenum; i++){
		if (inOrder[i] == root->key){
			rootPositionInorder = i;
			break;
		}
	}
	if (rootPositionInorder == -1)
		throw std::exception("Invalid Input!");
	//重建左子树
	int nodenumLeft = rootPositionInorder;
	int *preOrderLeft = preOrder + 1;
	int *inOrderLeft = inOrder;
	root->left = rebuilde_binarytree(preOrderLeft, inOrderLeft, nodenumLeft);
	//重建右子树
	int nodenumRight = nodenum - nodenumLeft - 1;
	int *preOrderRight = preOrder + nodenumLeft + 1;
	int *inOrderRight = inOrder + nodenumLeft + 1;
	root->right = rebuilde_binarytree(preOrderRight, inOrderRight, nodenumRight);

	return root;
}
//14、判断二叉树是不是完全二叉树
/*按层次（从上到下，从左到右）也就是层次遍历二叉树，当遇到一个节点的左子树为空时，则该节点右子树必须为空，
且后边遍历的节点左右子树都必须为空，否则不是完全二叉树。
*/
bool isCompleteBTree(Node *root){
	if (root == NULL)
		return false;
	queue<Node*>q;
	q.push(root);
	bool mustHaveNoChild = false;
	bool result = true;
	while (!q.empty()){
		Node* p = q.front();
		q.pop();
		if (mustHaveNoChild){// 已经出现了有空子树的节点了，后面出现的必须为叶节点（左右子树都为空)
			if (p->left&&p->right){
				result = false;
				break;
			}
		}
		else{
			if (p->left&&p->right){
				q.push(p->left);
				q.push(p->right);
			}
			else if (p->left&&p->right == NULL){
				mustHaveNoChild = true;
				q.push(p->left);
			}
			else if (p->left == NULL&&p->right){
				result = false;
				break;
			}
			else{
				mustHaveNoChild = true;
			}
		}
	}
	return result;
}
